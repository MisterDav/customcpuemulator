#define WRITE_MICROINSTRUCTIONS 0b10011010111111111100111101101100

uint8_t decoder_index = 0x00;
uint8_t decoder_opcode = 0x00;
bool decoder_finished = false;
bool carry_enabled = false;

uint32_t decoded_instruction = 0x0000;
uint32_t pre_instruction = 0x0000;


const uint8_t opcode_rom[64][16] = {
    0x00, 0x03, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // mova
    0x01, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // movb
    0x09, 0x07, 0x0D, 0x05, 0x09, 0x07, 0x0D, 0x06, 0x04, 0x0D, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, // lda
    0x09, 0x07, 0x0D, 0x05, 0x09, 0x07, 0x0D, 0x06, 0x04, 0x0D, 0x03, 0x1F, 0x00, 0x00, 0x00, 0x00, // ldb
    0x09, 0x07, 0x0D, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ldai
    0x09, 0x07, 0x0D, 0x03, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ldbi
    0x09, 0x07, 0x0D, 0x05, 0x09, 0x07, 0x0D, 0x06, 0x04, 0x00, 0x0E, 0x1F, 0x00, 0x00, 0x00, 0x00, // sta
    0x09, 0x07, 0x0D, 0x05, 0x09, 0x07, 0x0D, 0x06, 0x04, 0x01, 0x0E, 0x1F, 0x00, 0x00, 0x00, 0x00, // stb
    0x0C, 0x00, 0x0E, 0x0A, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pua
    0x0B, 0x0C, 0x0D, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // poa
    0x18, 0x13, 0x1A, 0x19, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // tss
    0x00, 0x19, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // wsr
    0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // nop
    0x01, 0x0F, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // add
    0x1C, 0x0F, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // adc
    0x09, 0x07, 0x0D, 0x0F, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // addi
    0x09, 0x1C, 0x07, 0x0D, 0x0F, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // adci
    0x01, 0x10, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // sub
    0x09, 0x1C, 0x07, 0x0D, 0x10, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // sbc
    0x09, 0x07, 0x0D, 0x10, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // subi
    0x1C, 0x10, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // sbci
    0x01, 0x11, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // or
    0x09, 0x07, 0x0D, 0x11, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ori
    0x01, 0x13, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // xor
    0x09, 0x07, 0x0D, 0x13, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // xori
    0x01, 0x12, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // and
    0x09, 0x07, 0x0D, 0x12, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // andi
    0x09, 0x07, 0x0D, 0x15, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // shr
    0x09, 0x07, 0x0D, 0x14, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // shl
    0x01, 0x10, 0x1A, 0x06, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // cmp
    0x09, 0x07, 0x0D, 0x10, 0x1A, 0x06, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // cmpi
    0x16, 0x1A, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // not
    0x09, 0x07, 0x0D, 0x05, 0x09, 0x07, 0x0D, 0x06, 0x1B, 0x04, 0x08, 0x1F, 0x00, 0x00, 0x00, 0x00, // je
    0x09, 0x07, 0x0D, 0x05, 0x09, 0x07, 0x0D, 0x06, 0x1C, 0x04, 0x08, 0x1F, 0x00, 0x00, 0x00, 0x00, // jc
    0x09, 0x07, 0x0D, 0x05, 0x09, 0x07, 0x0D, 0x06, 0x04, 0x08, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, // jmp
    0x07, 0x17, 0x0C, 0x1D, 0x0E, 0x0A, 0x0C, 0x1E, 0x0E, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // call1
    0x09, 0x07, 0x0D, 0x05, 0x09, 0x0D, 0x06, 0x04, 0x08, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // call2
    0x0B, 0x0C, 0x0D, 0x06, 0x0B, 0x0C, 0x0D, 0x05, 0x04, 0x08, 0x09, 0x09, 0x09, 0x1F, 0x00, 0x00, // ret
    0x0B, 0x0B, 0x0C, 0x0D, 0x19, 0x0B, 0x0C, 0x0D, 0x03, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // rti1
    0x0B, 0x0C, 0x0D, 0x02, 0x0B, 0x0C, 0x0D, 0x06, 0x0B, 0x0C, 0x0D, 0x05, 0x04, 0x08, 0x1F, 0x00, // rti2
    0x0C, 0x01, 0x0E, 0x0A, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pub
    0x0B, 0x0C, 0x0D, 0x03, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pob
    0x09, 0x07, 0x0D, 0x05, 0x09, 0x07, 0x0D, 0x0F, 0x1A, 0x06, 0x1C, 0x1D, 0x0F, 0x1A, 0x05, 0x1F, // load_offset
    0x04, 0x0D, 0x03, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ldbo
    0x04, 0x01, 0x0E, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // stbo 2c
    0x00, 0x05, 0x01, 0x06, 0x04, 0x0D, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ldx
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x17, 0x0C, 0x1D, 0x0E, 0x0A, 0x0C, 0x1E, 0x0E, 0x0A, 0x0C, 0x00, 0x0E, 0x0A, 0x1F, 0x00, // int1
    0x0C, 0x01, 0x0E, 0x0A, 0x0C, 0x18, 0x0E, 0x0A, 0x0D, 0x05, 0x09, 0x0D, 0x06, 0x04, 0x08, 0x1F  // int2
};

void decoder_reset() {
    decoder_index = 0x00;
    decoder_index = 0x00;
    decoded_instruction = 0x0000;
    pre_instruction = 0x0000;
}

void decode_microinstruction(bool clock) {
    if (CPU_STATE != 2 | !clock) {
        decoded_instruction = 0x0000;

        return;
    } 

    if (decoder_opcode >= 0x3F) {
        printf("Invalid opcode %02x", decoder_opcode);
        exit(1);
    }

    uint8_t microcode = opcode_rom[decoder_opcode][decoder_index++ & 0x0F];
    bool condition_a = microcode == 0x1F;

    // Yippee. I just spent 5 days debugging these two lines..
    bool condition_b = (microcode == 0x1B) & !((bool)(STATUS_REGISTER & 0b00000010));
    bool condition_c = (microcode == 0x1C) & !((bool)(STATUS_REGISTER & 0b00000001));
    if (condition_a | condition_b | condition_c) {
        CPU_STATE = 0;
        decoder_reset();
    }

    pre_instruction |= 0x01 << microcode;
    if ((0x01 << microcode) & WRITE_MICROINSTRUCTIONS) {
        decoded_instruction = pre_instruction;
        pre_instruction = 0x0000;
    }
    else {decoded_instruction = 0x0000;}
}